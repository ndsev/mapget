name: CI

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ '**' ]

jobs:
  build-manylinux:
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
    runs-on: ubuntu-latest
    container: ghcr.io/klebert-engineering/manylinux-cpp17-py${{ matrix.python-version }}:2023.1
    env:
      SCCACHE_GHA_ENABLED: "true"
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.3
      - name: Install Conan
        run: |
          pip install conan
          conan profile detect
      - name: Configure
        run: |
          python3 -m venv venv && . ./venv/bin/activate
          pip install -U setuptools wheel pip
          mkdir build && cd build && cmake \
            -DCMAKE_C_COMPILER_LAUNCHER=sccache \
            -DCMAKE_CXX_COMPILER_LAUNCHER=sccache \
            -DCMAKE_BUILD_TYPE=Release -GNinja ..
      - name: Build
        working-directory: build
        run: |
          . ../venv/bin/activate
          cmake --build .
          mv bin/wheel bin/wheel-auditme
          auditwheel repair bin/wheel-auditme/mapget*.whl -w bin/wheel
      - name: Test
        timeout-minutes: 30
        working-directory: build
        run: |
          . ../venv/bin/activate
          ctest -C Release --verbose --no-test=fail
      - name: Deploy
        uses: actions/upload-artifact@v2
        with:
          name: mapget-py${{ matrix.python-version }}-ubuntu-latest
          path: build/bin/wheel/*.whl
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-13, windows-2019]  # Currently, macos-latest is macos 12
        python-version: ["3.8", "3.9", "3.10", "3.11"]
    env:
      SCCACHE_GHA_ENABLED: "true"
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.3
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64
      - name: Install Conan
        run: |
          pip install conan
          conan profile detect
      - run: python -m pip install setuptools wheel
      - run: python -m pip install ninja
      - run: mkdir build
      - name: Build (macOS)
        if: matrix.os == 'macos-13'
        working-directory: build
        run: |
          python -m pip install delocate
          export MACOSX_DEPLOYMENT_TARGET=10.15
          cmake -DPython3_ROOT_DIR=$pythonLocation \
                -DPython3_FIND_FRAMEWORK=LAST \
                -DCMAKE_BUILD_TYPE=Release \
                -DHTTPLIB_USE_BROTLI_IF_AVAILABLE=OFF \
                -DCMAKE_C_COMPILER_LAUNCHER=sccache \
                -DCMAKE_CXX_COMPILER_LAUNCHER=sccache \
                -GNinja ..
          cmake --build .
          mv bin/wheel bin/wheel-auditme  # Same as on Linux
          ./_deps/python-cmake-wheel-src/repair-wheel-macos.bash \
                "$(pwd)"/bin/wheel-auditme/mapget*.whl \
                "$(pwd)"/bin/wheel mapget
      - name: Enable Developer Command Prompt (Windows)
        uses: ilammy/msvc-dev-cmd@v1.12.1
        if: matrix.os == 'windows-latest' || matrix.os == 'windows-2019'
      - name: Build (Windows)
        if: matrix.os == 'windows-latest' || matrix.os == 'windows-2019'
        working-directory: build
        run: |
          echo "cmake -DPython3_ROOT_DIR=$env:pythonLocation"
          cmake "-DPython3_ROOT_DIR=$env:pythonLocation" -DPython3_FIND_REGISTRY=LAST -DHTTPLIB_USE_ZLIB_IF_AVAILABLE=OFF -DCMAKE_C_COMPILER_LAUNCHER=sccache -DCMAKE_CXX_COMPILER_LAUNCHER=sccache -DCMAKE_C_COMPILER=cl.exe -DCMAKE_CXX_COMPILER=cl.exe -DCMAKE_BUILD_TYPE=Release -GNinja ..
          cmake --build . --config Release
      - name: Deploy
        uses: actions/upload-artifact@v2
        with:
          name: mapget-py${{ matrix.python-version }}-${{ matrix.os }}
          path: build/bin/wheel/*.whl
      - name: Test
        timeout-minutes: 30
        working-directory: build
        run: |
          ctest -C Release --verbose --no-test=fail
